### Summary: Functions in JavaScript

#### **What Are Functions?**
- Functions allow you to define reusable blocks of code that execute only when called.
- They can:
  - Take input values (parameters).
  - Perform operations.
  - Return output values.

---

#### **Defining a Function**
1. **Using the `function` Keyword**:
   ```javascript
   function greet() {
       console.log("Hello!");
   }
   ```
   - **Syntax**:
     - `function`: Keyword to define a function.
     - `greet`: Name of the function (follows variable naming conventions).
     - `()` (Parentheses): Used for parameters (optional).
     - `{}` (Curly braces): Contain the function's code.

2. **Calling a Function**:
   ```javascript
   greet(); // Output: "Hello!"
   ```

---

#### **Functions with Parameters**
- Parameters allow passing input values to the function.
  ```javascript
  function greetUser(userName, message) {
      console.log(`${userName}: ${message}`);
  }

  greetUser("Max", "Hello!"); // Output: "Max: Hello!"
  ```

- **Default Parameters**:
  - Assign default values to parameters if none are provided.
    ```javascript
    function greetUser(userName, message = "Hello!") {
        console.log(`${userName}: ${message}`);
    }

    greetUser("Max"); // Output: "Max: Hello!"
    ```

---

#### **Returning Values from Functions**
- Use the `return` keyword to produce an output value.
  ```javascript
  function createGreeting(userName, message) {
      return `Hi, I am ${userName}. ${message}`;
  }

  const greeting = createGreeting("Max", "Hello!");
  console.log(greeting); // Output: "Hi, I am Max. Hello!"
  ```

- **Note**: A function stops executing once it encounters a `return` statement.

---

#### **Best Practices for Functions**
1. **Meaningful Names**:
   - Name functions based on their purpose.
   ```javascript
   function calculateSum(a, b) {
       return a + b;
   }
   ```

2. **Use Parameters for Reusability**:
   - Avoid hardcoding values; use parameters instead.

3. **Structure for Readability**:
   - Store function outputs in variables for clarity.
   ```javascript
   const greeting = createGreeting("Max", "Hello!");
   console.log(greeting);
   ```

---

#### **Functions Without Parameters**
- Functions don't need parameters if they rely on other values or don't need inputs.
  ```javascript
  function sayHello() {
      return "Hello, World!";
  }

  console.log(sayHello()); // Output: "Hello, World!"
  ```

---

#### **Summary of Key Concepts**
1. **Creating a Function**:
   - Use `function` keyword followed by a name and parentheses.
2. **Calling a Function**:
   - Use the function name followed by `()` with any necessary arguments.
3. **Returning Values**:
   - Use `return` to provide output from a function.
4. **Default Parameters**:
   - Assign default values to avoid undefined parameters.

---

#### **Example**
```javascript
function calculateArea(width, height = 1) {
    return width * height;
}

const rectangleArea = calculateArea(5, 10); // 50
const squareArea = calculateArea(5); // 5 (height defaults to 1)

console.log(`Rectangle Area: ${rectangleArea}`);
console.log(`Square Area: ${squareArea}`);
```

Output:
```
Rectangle Area: 50
Square Area: 5
```

By understanding functions, you can write more modular, reusable, and maintainable code in JavaScript.